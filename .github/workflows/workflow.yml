name: –î–µ–ø–ª–æ–π sso_auth

on:
  push:
    branches: ["master"]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04

    env:
      NAME_APP: sso_auth
      NAME_DB: sso_auth
      SERVER_IP: 85.143.219.160
      GO_PORT: 50051
      DB_PORT: 38840
      DB_USER: sso_auth
      DB_PATH: /root/data/db/mongodb/
      GO_MAIN_FILE: /server/main.go
      ROOT_DIR: /root/apps/
      CONFIG_APP: config_prod.yaml
      PATH_SERVICE: /etc/systemd/system/ # –ü—É—Ç—å –∫ systemd –∫–æ–Ω—Ñ–∏–≥—É
      PROTO_DIR: /proto/
      GEN_DIR: /gen/
      GO_VERSION: 1.24.2

    steps:
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Go
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          REQUIRED_GO_VERSION="${{ env.GO_VERSION }}"
          set -euo pipefail
          
          CURRENT_GO="$(go version 2>/dev/null || echo 'none')"
          if [[ "$CURRENT_GO" == *"go$REQUIRED_GO_VERSION"* ]]; then
            echo "‚úÖ Go $REQUIRED_GO_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
          else
            echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go $REQUIRED_GO_VERSION..."
            curl -fsSL https://go.dev/dl/go$REQUIRED_GO_VERSION.linux-amd64.tar.gz -o go.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go.tar.gz
            echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/profile
            export PATH=/usr/local/go/bin:$PATH
            rm go.tar.gz
            echo " ‚úÖ Go $REQUIRED_GO_VERSION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            go version
          fi
          EOF

      - name: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} "chmod -x /etc/update-motd.d/*"
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'rm -f ${{ env.PATH_SERVICE }}${{ env.NAME_APP }}.service || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å systemd —Ñ–∞–π–ª"; cd ${{ env.PATH_SERVICE }}; ls; }'
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'rm -rf ${{ env.ROOT_DIR }}${{ env.NAME_APP }}${{ env.GEN_DIR }} || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É gen"; cd ${{ env.ROOT_DIR }}${{ env.NAME_APP }}${{ env.GEN_DIR }}; ls; }'
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'rm -rf ${{ env.ROOT_DIR }}${{ env.NAME_APP }}${{ env.PROTO_DIR }} || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É proto"; cd ${{ env.ROOT_DIR }}${{ env.NAME_APP }}${{ env.PROTO_DIR }}; ls; }'
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'rm -rf ${{ env.ROOT_DIR }}${{ env.NAME_APP }}/build/ || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É build"; cd ${{ env.ROOT_DIR }}${{ env.NAME_APP }}/build/; ls; }'
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'mkdir -p ${{ env.ROOT_DIR }}${{ env.NAME_APP }}/build/'
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'ls -la ${{ env.ROOT_DIR }}${{ env.NAME_APP }}/build/'

      - name: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        run: |
          sudo apt-get install -y ssh rsync
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} 'mkdir -p ${{ env.ROOT_DIR }}${{ env.NAME_APP }}/'
          rsync -avz --exclude='.git' ./ root@${{ env.SERVER_IP }}:${{ env.ROOT_DIR }}${{ env.NAME_APP }}/

      - name: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          set -euo pipefail
          mkdir -p ${{ env.ROOT_DIR }}${{env.NAME_APP}}/build/
          cd ${{ env.ROOT_DIR }}${{env.NAME_APP}}
          if GOOS=linux GOARCH=amd64 CGO_ENABLED=0 \
          go build -o "${{ env.ROOT_DIR }}${{env.NAME_APP}}/build/${{env.NAME_APP}}" "${{ env.ROOT_DIR }}${{env.NAME_APP}}${{env.GO_MAIN_FILE}}"; then 
          echo "‚úÖ ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ!"
          else
          echo "‚ùå ‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ go.mod –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –æ—à–∏–±–∫–∏." >&2
          exit 1
          fi
          EOF

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Proto –∏ –ø–ª–∞–≥–∏–Ω–æ–≤
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          export PATH=$PATH:/usr/local/go/bin:$(go env GOPATH)/bin
          set -euo pipefail
          echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤‚Ä¶"
          apt-get update
          if ! command -v protoc >/dev/null; then
            echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Protoc..."
            apt-get install -y protobuf-compiler && echo " ‚úÖ Protoc —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" || { echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Protoc"; exit 1; }
          else
            echo "‚úÖ Protoc –£–ñ–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
          fi
          if ! command -v protoc-gen-go >/dev/null; then
            echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º protoc-gen-go..."
            go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && echo " ‚úÖ –ü–ª–∞–≥–∏–Ω Protoc-gen-go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" || { echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ Protoc-gen-go"; exit 1; }
          else
            echo "‚úÖ –ü–ª–∞–≥–∏–Ω Protoc-gen-go-grpc –£–ñ–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
          fi
          if ! command -v protoc-gen-go-grpc >/dev/null; then
            echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º protoc-gen-go-grpc..."
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest && echo " ‚úÖ –ü–ª–∞–≥–∏–Ω Protoc-gen-go-grpc —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" || { echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ Protoc-gen-go-grpc"; exit 1; }
          else
            echo "‚úÖ –ü–ª–∞–≥–∏–Ω Protoc-gen-go-grpc –£–ñ–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
          fi
          echo "‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Proto –∏ –ø–ª–∞–≥–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
          EOF

      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Proto-–∫–æ–¥–∞
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          set -euo pipefail 
          mkdir -p ${{ env.ROOT_DIR }}${{env.NAME_APP}}${{ env.GEN_DIR }} && echo " ‚úÖ –ü–∞–ø–∫–∞ –¥–ª—è –≥–µ–Ω-–∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!" || echo " ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏!"
          protoc -I=${{ env.ROOT_DIR }}${{ env.NAME_APP }}/proto \
            --go_out=${{ env.ROOT_DIR }}${{ env.NAME_APP }}${{ env.GEN_DIR }} \
            --go_opt=paths=source_relative \
            --go-grpc_out=${{ env.ROOT_DIR }}${{ env.NAME_APP }}${{ env.GEN_DIR }} \
            --go-grpc_opt=paths=source_relative \
            ${{ env.ROOT_DIR }}${{ env.NAME_APP }}/proto/*.proto && echo "‚úÖ Proto-–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!" || { echo "‚ùå Proto-–ö–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!"; exit 1; }
          EOF

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MongoDB
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          if ! dpkg -l | grep -q mongodb-org; then
          echo " ==== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MongoDB . . .  ==== "
          curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | gpg --dearmor > mongodb-server-7.0.gpg
          mv mongodb-server-7.0.gpg /etc/apt/trusted.gpg.d/
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | gpg --dearmor > /usr/share/keyrings/mongo.gpg
          echo 'deb [ signed-by=/usr/share/keyrings/mongo.gpg arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse' | tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          apt update || { echo "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"; exit 1; }
          apt install -y mongodb-org || { echo "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MongoDB"; exit 1; }
          echo " ‚úÖ ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ MongoDB –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==== "
          else
          echo " ‚úÖ MongoDB —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ==== "
          fi
          EOF

      - name: –°–æ–∑–¥–∞–Ω–∏–µ Service-—Ñ–∞–π–ª–∞ Mongo DB
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          DB_SERVICE_PATH=${{ env.PATH_SERVICE }}mongodb_${{ env.NAME_APP }}.service
          if [ -f $DB_SERVICE_PATH ]; then
            rm $DB_SERVICE_PATH
          fi
          touch $DB_SERVICE_PATH
          chmod 600 $DB_SERVICE_PATH
          chown root:root $DB_SERVICE_PATH
          echo "[Unit]" | tee "$DB_SERVICE_PATH"
          echo "Description=Start MongoDB (Auth)" | tee -a "$DB_SERVICE_PATH"
          echo "After=network.target" | tee -a "$DB_SERVICE_PATH"
          echo "[Service]" | tee -a "$DB_SERVICE_PATH"
          echo "User=root" | tee -a "$DB_SERVICE_PATH"
          echo "Group=mongodb" | tee -a "$DB_SERVICE_PATH"
          echo "ExecStart=/usr/bin/mongod --port ${{ env.DB_PORT }} --dbpath=${{ env.DB_PATH }}${{ env.NAME_DB }}/ --auth" | tee -a "$DB_SERVICE_PATH"
          echo "Restart=always" | tee -a "$DB_SERVICE_PATH"
          echo "RestartSec=5" | tee -a "$DB_SERVICE_PATH"
          echo "[Install]" | tee -a "$DB_SERVICE_PATH"
          echo "WantedBy=multi-user.target" | tee -a "$DB_SERVICE_PATH"
          EOF

      - name: –°–æ–∑–¥–∞–Ω–∏–µ Service-—Ñ–∞–π–ª–∞ Mongo DB (TEMP)
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          DB_SERVICE_PATH=${{ env.PATH_SERVICE }}mongodb_${{ env.NAME_APP }}_tmp.service 
          if [ -f "$DB_SERVICE_PATH" ]; then
            rm $DB_SERVICE_PATH
          fi
          touch $DB_SERVICE_PATH
          chmod 600 $DB_SERVICE_PATH
          chown root:root $DB_SERVICE_PATH
          
          echo "[Unit]" | tee "$DB_SERVICE_PATH"
          echo "Description=Start MongoDB (No Auth)" | tee -a "$DB_SERVICE_PATH"
          echo "After=network.target" | tee -a "$DB_SERVICE_PATH"
          echo "[Service]" | tee -a "$DB_SERVICE_PATH"
          echo "User=root" | tee -a "$DB_SERVICE_PATH"
          echo "Group=mongodb" | tee -a "$DB_SERVICE_PATH"
          echo "ExecStart=/usr/bin/mongod --port ${{ env.DB_PORT }} --dbpath=${{ env.DB_PATH }}${{ env.NAME_DB }}/ --noauth" | tee -a "$DB_SERVICE_PATH"
          echo "Restart=no" | tee -a "$DB_SERVICE_PATH"
          echo "[Install]" | tee -a "$DB_SERVICE_PATH"
          echo "WantedBy=multi-user.target" | tee -a "$DB_SERVICE_PATH"
          EOF

      - name: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MongoDB
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          echo "===== –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MongoDB . . .  ====== "
          DB_SERVICE_FILE=mongodb_${{ env.NAME_APP }}.service
          DB_SERVICE_PATH=${{ env.PATH_SERVICE }}mongodb_${{ env.NAME_APP }}.service
          DB_SERVICE_TMP_FILE=mongodb_${{ env.NAME_APP }}_tmp.service
          DB_SERVICE_TMP_PATH=${{ env.PATH_SERVICE }}mongodb_${{ env.NAME_APP }}_tmp.service
          mkdir -p ${{ env.DB_PATH }}${{ env.NAME_DB }}/
          
          systemctl disable $DB_SERVICE_FILE     
          if systemctl is-active --quiet $DB_SERVICE_PATH; then
          echo " ‚ùå ‚úÖ MongoDB –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
          systemctl stop $DB_SERVICE_FILE
          else
          echo " ‚úÖ MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω."
          fi

          systemctl disable $DB_SERVICE_TMP_FILE
          if systemctl is-active --quiet $DB_SERVICE_TMP_PATH; then
          echo " ‚ùå ‚úÖ MongoDB(tmp) –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
          systemctl stop $DB_SERVICE_TMP_FILE
          else
          echo " ‚úÖ MongoDB(tmp) –Ω–µ –∑–∞–ø—É—â–µ–Ω"
          fi
          
          EOF

      - name: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å
        run: |
          ssh -t -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'
          DB_SERVICE_FILE=${{ env.PATH_SERVICE }}mongodb_${{ env.NAME_APP }}.service
          DB_SERVICE_TMP_FILE=mongodb_${{ env.NAME_APP }}_tmp.service
          
          pid=$(ss -tunlp | grep ":${{ env.DB_PORT }}" | awk '{print $7}' | cut -d ',' -f 2 | tr -d 'pid=' || echo "")
          
          if [ ! -z "$pid" ]; then
          echo " –ù–∞–π–¥–µ–Ω PID –ø—Ä–æ—Ü–µ—Å—Å–∞ MongoDB: $pid "
          kill -9 $pid
          echo " ‚ùå ‚úÖ MongoDB –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ"
          else
          echo " ‚úÖ ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É ${{ env.DB_PORT }} –∑–∞–∫—Ä—ã—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π MongoDB"
          fi
          systemctl daemon-reload && systemctl restart $DB_SERVICE_TMP_FILE
          sleep 3

          mongosh --port ${{ env.DB_PORT }} --eval "
          
          db = db.getSiblingDB('admin');
          if (!db.getUser('${{ env.DB_USER }}')) {
            db.createUser({ user: '${{ env.DB_USER }}', pwd: '${{ secrets.DB_PASS }}', roles: [ { role: 'root', db: 'admin' } ] });
            print(' ‚úÖ ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${{ env.DB_USER }} —Å–æ–∑–¥–∞–Ω –≤ admin.');
          } else {
            print(' ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${{ env.DB_USER }} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ admin.');
          }

          db = db.getSiblingDB('${{ env.NAME_DB }}');
          if (!db.getUser('${{ env.DB_USER }}')) {
            db.createUser({ user: '${{ env.DB_USER }}', pwd: '${{ secrets.DB_PASS }}', roles: [ { role: 'dbOwner', db: '${{ env.NAME_DB }}' } ] });
            print(' ‚úÖ  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${{ env.DB_USER }} —Å–æ–∑–¥–∞–Ω –≤ ${{ env.NAME_DB }}.');
          } else {
            print(' ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${{ env.DB_USER }} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ${{ env.NAME_DB }}.');
          }"
          
          systemctl stop $DB_SERVICE_TMP_FILE
          
          if ss -tunlp | grep ":${{ env.DB_PORT }}" > /dev/null; then
            echo " ‚ùå –û—Å—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Ä—Ç ${{ env.DB_PORT }}"
          else 
            echo " ‚úÖ ‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É MongoDB —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
          fi
          EOF

      - name: –ó–∞–ø—É—Å–∫ MongoDB
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF' 
          DB_SERVICE_FILE=mongodb_${{ env.NAME_APP }}.service
          systemctl daemon-reload && systemctl restart $DB_SERVICE_FILE && systemctl enable $DB_SERVICE_FILE && systemctl status $DB_SERVICE_FILE
          EOF

      - name: –°–æ–∑–¥–∞–Ω–∏–µ systemd –∏ –∑–∞–ø—É—Å–∫ GO-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} << 'EOF'          
          set -e
          SERVICE_APP="${{ env.PATH_SERVICE }}${{ env.NAME_APP }}.service"

          echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ systemd unit-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..."
          if systemctl is-active --quiet ${{ env.NAME_APP }}; then
            echo "‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
            systemctl stop ${{ env.NAME_APP }}
          fi
          if [ -f "$SERVICE_APP" ]; then
            echo "üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π unit-—Ñ–∞–π–ª..."
            rm -f "$SERVICE_APP"
          fi

          tee "$SERVICE_APP" > /dev/null <<EOL
          [Unit]
          Description=Go Application
          After=network.target
          
          [Service]
          ExecStart=${{ env.ROOT_DIR }}${{env.NAME_APP}}/build/${{env.NAME_APP}} --config=${{ env.ROOT_DIR }}${{env.NAME_APP}}/configs/${{env.CONFIG_APP}}
          WorkingDirectory=${{ env.ROOT_DIR }}${{env.NAME_APP}}
          Restart=always
          StandardOutput=inherit
          User=root
          Environment=PORT=${{ env.GO_PORT }}
          
          [Install]
          WantedBy=multi-user.target
          EOL
          
          chmod 600 "$SERVICE_APP"
          chown root:root "$SERVICE_APP"
          
          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable --now ${{ env.NAME_APP }}
          
          systemctl status ${{ env.NAME_APP }}
          if systemctl is-active --quiet ${{ env.NAME_APP }}; then
          echo "‚úÖ ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${{ env.NAME_APP }} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–Ω–æ."
          else
          journalctl -u ${{ env.NAME_APP }} -n 50
          echo "‚ùå ‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${{ env.NAME_APP }} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å." >&2
          exit 1
          fi
          EOF
